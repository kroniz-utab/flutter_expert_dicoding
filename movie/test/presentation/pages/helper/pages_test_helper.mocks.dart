// Mocks generated by Mockito 5.0.16 from annotations
// in movie/test/presentation/pages/helper/pages_test_helper.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:bloc/bloc.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:movie/movie.dart' as _i2;
import 'package:watchlist/watchlist.dart' as _i4;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeMovieDetailState_0 extends _i1.Fake implements _i2.MovieDetailState {
}

class _FakeStreamSubscription_1<T> extends _i1.Fake
    implements _i3.StreamSubscription<T> {}

class _FakeMovieListState_2 extends _i1.Fake implements _i2.MovieListState {}

class _FakeMoviePopularState_3 extends _i1.Fake
    implements _i2.MoviePopularState {}

class _FakeMovieRecommendationState_4 extends _i1.Fake
    implements _i2.MovieRecommendationState {}

class _FakeMovieTopRatedState_5 extends _i1.Fake
    implements _i2.MovieTopRatedState {}

class _FakeMovieWatchlistState_6 extends _i1.Fake
    implements _i4.MovieWatchlistState {}

/// A class which mocks [MovieDetailBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieDetailBloc extends _i1.Mock implements _i2.MovieDetailBloc {
  MockMovieDetailBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieDetailState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeMovieDetailState_0()) as _i2.MovieDetailState);
  @override
  _i3.Stream<_i2.MovieDetailState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i2.MovieDetailState>.empty())
          as _i3.Stream<_i2.MovieDetailState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i2.MovieDetailEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i2.MovieDetailEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<
      _i5.Transition<_i2.MovieDetailEvent, _i2.MovieDetailState>> transformEvents(
          _i3.Stream<_i2.MovieDetailEvent>? events,
          _i5.TransitionFunction<_i2.MovieDetailEvent, _i2.MovieDetailState>?
              transitionFn) =>
      (super.noSuchMethod(
              Invocation.method(#transformEvents, [events, transitionFn]),
              returnValue:
                  Stream<_i5.Transition<_i2.MovieDetailEvent, _i2.MovieDetailState>>.empty())
          as _i3.Stream<
              _i5.Transition<_i2.MovieDetailEvent, _i2.MovieDetailState>>);
  @override
  void emit(_i2.MovieDetailState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i2.MovieDetailEvent>(
          _i5.EventHandler<E, _i2.MovieDetailState>? handler,
          {_i5.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i2.MovieDetailState> mapEventToState(
          _i2.MovieDetailEvent? event) =>
      (super.noSuchMethod(Invocation.method(#mapEventToState, [event]),
              returnValue: Stream<_i2.MovieDetailState>.empty())
          as _i3.Stream<_i2.MovieDetailState>);
  @override
  void onTransition(
          _i5.Transition<_i2.MovieDetailEvent, _i2.MovieDetailState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<
      _i5.Transition<_i2.MovieDetailEvent, _i2.MovieDetailState>> transformTransitions(
          _i3.Stream<_i5.Transition<_i2.MovieDetailEvent, _i2.MovieDetailState>>?
              transitions) =>
      (super.noSuchMethod(
              Invocation.method(#transformTransitions, [transitions]),
              returnValue:
                  Stream<_i5.Transition<_i2.MovieDetailEvent, _i2.MovieDetailState>>.empty())
          as _i3.Stream<
              _i5.Transition<_i2.MovieDetailEvent, _i2.MovieDetailState>>);
  @override
  _i3.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.StreamSubscription<_i2.MovieDetailState> listen(
          void Function(_i2.MovieDetailState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_1<_i2.MovieDetailState>())
          as _i3.StreamSubscription<_i2.MovieDetailState>);
  @override
  void onChange(_i5.Change<_i2.MovieDetailState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [MovieListBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieListBloc extends _i1.Mock implements _i2.MovieListBloc {
  MockMovieListBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieListState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeMovieListState_2()) as _i2.MovieListState);
  @override
  _i3.Stream<_i2.MovieListState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i2.MovieListState>.empty())
          as _i3.Stream<_i2.MovieListState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i2.MovieListEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i2.MovieListEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i5.Transition<_i2.MovieListEvent, _i2.MovieListState>> transformEvents(
          _i3.Stream<_i2.MovieListEvent>? events,
          _i5.TransitionFunction<_i2.MovieListEvent, _i2.MovieListState>?
              transitionFn) =>
      (super.noSuchMethod(
              Invocation.method(#transformEvents, [events, transitionFn]),
              returnValue: Stream<
                  _i5.Transition<_i2.MovieListEvent, _i2.MovieListState>>.empty())
          as _i3
              .Stream<_i5.Transition<_i2.MovieListEvent, _i2.MovieListState>>);
  @override
  void emit(_i2.MovieListState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i2.MovieListEvent>(
          _i5.EventHandler<E, _i2.MovieListState>? handler,
          {_i5.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i2.MovieListState> mapEventToState(_i2.MovieListEvent? event) =>
      (super.noSuchMethod(Invocation.method(#mapEventToState, [event]),
              returnValue: Stream<_i2.MovieListState>.empty())
          as _i3.Stream<_i2.MovieListState>);
  @override
  void onTransition(
          _i5.Transition<_i2.MovieListEvent, _i2.MovieListState>? transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i5.Transition<_i2.MovieListEvent, _i2.MovieListState>>
      transformTransitions(
              _i3.Stream<_i5.Transition<_i2.MovieListEvent, _i2.MovieListState>>?
                  transitions) =>
          (super.noSuchMethod(
              Invocation.method(#transformTransitions, [transitions]),
              returnValue: Stream<
                  _i5.Transition<_i2.MovieListEvent, _i2.MovieListState>>.empty()) as _i3
              .Stream<_i5.Transition<_i2.MovieListEvent, _i2.MovieListState>>);
  @override
  _i3.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.StreamSubscription<_i2.MovieListState> listen(
          void Function(_i2.MovieListState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_1<_i2.MovieListState>())
          as _i3.StreamSubscription<_i2.MovieListState>);
  @override
  void onChange(_i5.Change<_i2.MovieListState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [MoviePopularBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMoviePopularBloc extends _i1.Mock implements _i2.MoviePopularBloc {
  MockMoviePopularBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MoviePopularState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeMoviePopularState_3()) as _i2.MoviePopularState);
  @override
  _i3.Stream<_i2.MoviePopularState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i2.MoviePopularState>.empty())
          as _i3.Stream<_i2.MoviePopularState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i2.MoviePopularEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i2.MoviePopularEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i5.Transition<_i2.MoviePopularEvent, _i2.MoviePopularState>>
      transformEvents(
              _i3.Stream<_i2.MoviePopularEvent>? events,
              _i5.TransitionFunction<_i2.MoviePopularEvent, _i2.MoviePopularState>?
                  transitionFn) =>
          (super.noSuchMethod(
                  Invocation.method(#transformEvents, [events, transitionFn]),
                  returnValue:
                      Stream<_i5.Transition<_i2.MoviePopularEvent, _i2.MoviePopularState>>.empty())
              as _i3.Stream<
                  _i5.Transition<_i2.MoviePopularEvent, _i2.MoviePopularState>>);
  @override
  void emit(_i2.MoviePopularState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i2.MoviePopularEvent>(
          _i5.EventHandler<E, _i2.MoviePopularState>? handler,
          {_i5.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i2.MoviePopularState> mapEventToState(
          _i2.MoviePopularEvent? event) =>
      (super.noSuchMethod(Invocation.method(#mapEventToState, [event]),
              returnValue: Stream<_i2.MoviePopularState>.empty())
          as _i3.Stream<_i2.MoviePopularState>);
  @override
  void onTransition(
          _i5.Transition<_i2.MoviePopularEvent, _i2.MoviePopularState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i5.Transition<_i2.MoviePopularEvent, _i2.MoviePopularState>>
      transformTransitions(
              _i3.Stream<_i5.Transition<_i2.MoviePopularEvent, _i2.MoviePopularState>>?
                  transitions) =>
          (super.noSuchMethod(
                  Invocation.method(#transformTransitions, [transitions]),
                  returnValue:
                      Stream<_i5.Transition<_i2.MoviePopularEvent, _i2.MoviePopularState>>.empty())
              as _i3.Stream<
                  _i5.Transition<_i2.MoviePopularEvent, _i2.MoviePopularState>>);
  @override
  _i3.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.StreamSubscription<_i2.MoviePopularState> listen(
          void Function(_i2.MoviePopularState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_1<_i2.MoviePopularState>())
          as _i3.StreamSubscription<_i2.MoviePopularState>);
  @override
  void onChange(_i5.Change<_i2.MoviePopularState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [MovieRecommendationBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRecommendationBloc extends _i1.Mock
    implements _i2.MovieRecommendationBloc {
  MockMovieRecommendationBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRecommendationState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
              returnValue: _FakeMovieRecommendationState_4())
          as _i2.MovieRecommendationState);
  @override
  _i3.Stream<_i2.MovieRecommendationState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i2.MovieRecommendationState>.empty())
          as _i3.Stream<_i2.MovieRecommendationState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i2.MovieRecommendationEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i2.MovieRecommendationEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i5.Transition<_i2.MovieRecommendationEvent, _i2.MovieRecommendationState>>
      transformEvents(
              _i3.Stream<_i2.MovieRecommendationEvent>? events,
              _i5.TransitionFunction<_i2.MovieRecommendationEvent,
                      _i2.MovieRecommendationState>?
                  transitionFn) =>
          (super.noSuchMethod(
                  Invocation.method(#transformEvents, [events, transitionFn]),
                  returnValue:
                      Stream<_i5.Transition<_i2.MovieRecommendationEvent, _i2.MovieRecommendationState>>.empty())
              as _i3.Stream<_i5.Transition<_i2.MovieRecommendationEvent, _i2.MovieRecommendationState>>);
  @override
  void emit(_i2.MovieRecommendationState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i2.MovieRecommendationEvent>(
          _i5.EventHandler<E, _i2.MovieRecommendationState>? handler,
          {_i5.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i2.MovieRecommendationState> mapEventToState(
          _i2.MovieRecommendationEvent? event) =>
      (super.noSuchMethod(Invocation.method(#mapEventToState, [event]),
              returnValue: Stream<_i2.MovieRecommendationState>.empty())
          as _i3.Stream<_i2.MovieRecommendationState>);
  @override
  void onTransition(
          _i5.Transition<_i2.MovieRecommendationEvent,
                  _i2.MovieRecommendationState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i5.Transition<_i2.MovieRecommendationEvent, _i2.MovieRecommendationState>>
      transformTransitions(
              _i3.Stream<_i5.Transition<_i2.MovieRecommendationEvent, _i2.MovieRecommendationState>>?
                  transitions) =>
          (super.noSuchMethod(
                  Invocation.method(#transformTransitions, [transitions]),
                  returnValue:
                      Stream<_i5.Transition<_i2.MovieRecommendationEvent, _i2.MovieRecommendationState>>.empty())
              as _i3.Stream<
                  _i5.Transition<_i2.MovieRecommendationEvent, _i2.MovieRecommendationState>>);
  @override
  _i3.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.StreamSubscription<_i2.MovieRecommendationState> listen(
          void Function(_i2.MovieRecommendationState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue:
                  _FakeStreamSubscription_1<_i2.MovieRecommendationState>())
          as _i3.StreamSubscription<_i2.MovieRecommendationState>);
  @override
  void onChange(_i5.Change<_i2.MovieRecommendationState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [MovieTopRatedBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieTopRatedBloc extends _i1.Mock implements _i2.MovieTopRatedBloc {
  MockMovieTopRatedBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieTopRatedState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeMovieTopRatedState_5()) as _i2.MovieTopRatedState);
  @override
  _i3.Stream<_i2.MovieTopRatedState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i2.MovieTopRatedState>.empty())
          as _i3.Stream<_i2.MovieTopRatedState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i2.MovieTopRatedEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i2.MovieTopRatedEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i5.Transition<_i2.MovieTopRatedEvent, _i2.MovieTopRatedState>>
      transformEvents(
              _i3.Stream<_i2.MovieTopRatedEvent>? events,
              _i5.TransitionFunction<_i2.MovieTopRatedEvent, _i2.MovieTopRatedState>?
                  transitionFn) =>
          (super.noSuchMethod(
                  Invocation.method(#transformEvents, [events, transitionFn]),
                  returnValue:
                      Stream<_i5.Transition<_i2.MovieTopRatedEvent, _i2.MovieTopRatedState>>.empty())
              as _i3.Stream<
                  _i5.Transition<_i2.MovieTopRatedEvent, _i2.MovieTopRatedState>>);
  @override
  void emit(_i2.MovieTopRatedState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i2.MovieTopRatedEvent>(
          _i5.EventHandler<E, _i2.MovieTopRatedState>? handler,
          {_i5.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i2.MovieTopRatedState> mapEventToState(
          _i2.MovieTopRatedEvent? event) =>
      (super.noSuchMethod(Invocation.method(#mapEventToState, [event]),
              returnValue: Stream<_i2.MovieTopRatedState>.empty())
          as _i3.Stream<_i2.MovieTopRatedState>);
  @override
  void onTransition(
          _i5.Transition<_i2.MovieTopRatedEvent, _i2.MovieTopRatedState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i5.Transition<_i2.MovieTopRatedEvent, _i2.MovieTopRatedState>>
      transformTransitions(
              _i3.Stream<_i5.Transition<_i2.MovieTopRatedEvent, _i2.MovieTopRatedState>>?
                  transitions) =>
          (super.noSuchMethod(
                  Invocation.method(#transformTransitions, [transitions]),
                  returnValue:
                      Stream<_i5.Transition<_i2.MovieTopRatedEvent, _i2.MovieTopRatedState>>.empty())
              as _i3.Stream<
                  _i5.Transition<_i2.MovieTopRatedEvent, _i2.MovieTopRatedState>>);
  @override
  _i3.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.StreamSubscription<_i2.MovieTopRatedState> listen(
          void Function(_i2.MovieTopRatedState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_1<_i2.MovieTopRatedState>())
          as _i3.StreamSubscription<_i2.MovieTopRatedState>);
  @override
  void onChange(_i5.Change<_i2.MovieTopRatedState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [MovieWatchlistBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieWatchlistBloc extends _i1.Mock
    implements _i4.MovieWatchlistBloc {
  MockMovieWatchlistBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.MovieWatchlistState get state => (super.noSuchMethod(
      Invocation.getter(#state),
      returnValue: _FakeMovieWatchlistState_6()) as _i4.MovieWatchlistState);
  @override
  _i3.Stream<_i4.MovieWatchlistState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i4.MovieWatchlistState>.empty())
          as _i3.Stream<_i4.MovieWatchlistState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i4.MovieWatchlistEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i4.MovieWatchlistEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i5.Transition<_i4.MovieWatchlistEvent, _i4.MovieWatchlistState>>
      transformEvents(
              _i3.Stream<_i4.MovieWatchlistEvent>? events,
              _i5.TransitionFunction<_i4.MovieWatchlistEvent, _i4.MovieWatchlistState>?
                  transitionFn) =>
          (super.noSuchMethod(
                  Invocation.method(#transformEvents, [events, transitionFn]),
                  returnValue:
                      Stream<_i5.Transition<_i4.MovieWatchlistEvent, _i4.MovieWatchlistState>>.empty())
              as _i3.Stream<
                  _i5.Transition<_i4.MovieWatchlistEvent, _i4.MovieWatchlistState>>);
  @override
  void emit(_i4.MovieWatchlistState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i4.MovieWatchlistEvent>(
          _i5.EventHandler<E, _i4.MovieWatchlistState>? handler,
          {_i5.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i4.MovieWatchlistState> mapEventToState(
          _i4.MovieWatchlistEvent? event) =>
      (super.noSuchMethod(Invocation.method(#mapEventToState, [event]),
              returnValue: Stream<_i4.MovieWatchlistState>.empty())
          as _i3.Stream<_i4.MovieWatchlistState>);
  @override
  void onTransition(
          _i5.Transition<_i4.MovieWatchlistEvent, _i4.MovieWatchlistState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i5.Transition<_i4.MovieWatchlistEvent, _i4.MovieWatchlistState>>
      transformTransitions(
              _i3.Stream<_i5.Transition<_i4.MovieWatchlistEvent, _i4.MovieWatchlistState>>?
                  transitions) =>
          (super.noSuchMethod(
                  Invocation.method(#transformTransitions, [transitions]),
                  returnValue:
                      Stream<_i5.Transition<_i4.MovieWatchlistEvent, _i4.MovieWatchlistState>>.empty())
              as _i3.Stream<
                  _i5.Transition<_i4.MovieWatchlistEvent, _i4.MovieWatchlistState>>);
  @override
  _i3.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.StreamSubscription<_i4.MovieWatchlistState> listen(
          void Function(_i4.MovieWatchlistState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_1<_i4.MovieWatchlistState>())
          as _i3.StreamSubscription<_i4.MovieWatchlistState>);
  @override
  void onChange(_i5.Change<_i4.MovieWatchlistState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}
